
import os
import sys
import subprocess
import tempfile
import zipfile
from pathlib import Path
import urllib.request
import shutil

# Embedded application files (base64 encoded)
APP_FILES = {
    "ai_computer_agent.py": "aW1wb3J0IHRraW50ZXIgYXMgdGsNCmZyb20gdGtpbnRlciBpbXBvcnQgdHRrLCBzY3JvbGxlZHRleHQsIG1lc3NhZ2Vib3gsIGZpbGVkaWFsb2cNCmltcG9ydCBzdWJwcm9jZXNzDQppbXBvcnQgb3MNCmltcG9ydCB3ZWJicm93c2VyDQppbXBvcnQgdGltZQ0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCmltcG9ydCBqc29uDQppbXBvcnQgdGhyZWFkaW5nDQppbXBvcnQgc3lzDQpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgNCg0KIyBBSSBpbXBvcnRzICh3aXRoIGZhbGxiYWNrcyBpZiBub3QgaW5zdGFsbGVkKQ0KdHJ5Og0KICAgIGZyb20gdHJhbnNmb3JtZXJzIGltcG9ydCBwaXBlbGluZSwgQXV0b1Rva2VuaXplciwgQXV0b01vZGVsRm9yQ2F1c2FsTE0NCiAgICBmcm9tIHNlbnRlbmNlX3RyYW5zZm9ybWVycyBpbXBvcnQgU2VudGVuY2VUcmFuc2Zvcm1lcg0KICAgIGltcG9ydCB0b3JjaA0KICAgIEFJX0FWQUlMQUJMRSA9IFRydWUNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBBSV9BVkFJTEFCTEUgPSBGYWxzZQ0KICAgIHByaW50KCJBSSBsaWJyYXJpZXMgbm90IGluc3RhbGxlZC4gUnVubmluZyBpbiBiYXNpYyBtb2RlLiIpDQoNCmNsYXNzIExvY2FsQUlNYW5hZ2VyOg0KICAgICIiIk1hbmFnZXMgbG9jYWwgQUkgbW9kZWxzIGZvciBjb21tYW5kIGludGVycHJldGF0aW9uIGFuZCBnZW5lcmF0aW9uIiIiDQogICAgDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLm1vZGVsc19kaXIgPSBQYXRoKCJtb2RlbHMiKQ0KICAgICAgICBzZWxmLm1vZGVsc19kaXIubWtkaXIoZXhpc3Rfb2s9VHJ1ZSkNCiAgICAgICAgc2VsZi5jb21tYW5kX2NsYXNzaWZpZXIgPSBOb25lDQogICAgICAgIHNlbGYudGV4dF9nZW5lcmF0b3IgPSBOb25lDQogICAgICAgIHNlbGYuZW1iZWRkZXIgPSBOb25lDQogICAgICAgIHNlbGYuaW5pdGlhbGl6ZWQgPSBGYWxzZQ0KICAgICAgICANCiAgICBkZWYgaW5pdGlhbGl6ZV9tb2RlbHMoc2VsZiwgY2FsbGJhY2s9Tm9uZSk6DQogICAgICAgICIiIkluaXRpYWxpemUgQUkgbW9kZWxzIHdpdGggcHJvZ3Jlc3MgY2FsbGJhY2siIiINCiAgICAgICAgaWYgbm90IEFJX0FWQUlMQUJMRToNCiAgICAgICAgICAgIGlmIGNhbGxiYWNrOg0KICAgICAgICAgICAgICAgIGNhbGxiYWNrKCJBSSBsaWJyYXJpZXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGluc3RhbGwgcmVxdWlyZW1lbnRzLiIpDQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgICAgIA0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpZiBjYWxsYmFjazoNCiAgICAgICAgICAgICAgICBjYWxsYmFjaygiTG9hZGluZyBjb21tYW5kIGNsYXNzaWZpZXIuLi4iKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAjIFVzZSBhIGxpZ2h0d2VpZ2h0IG1vZGVsIGZvciBjb21tYW5kIGNsYXNzaWZpY2F0aW9uDQogICAgICAgICAgICBzZWxmLmNvbW1hbmRfY2xhc3NpZmllciA9IHBpcGVsaW5lKA0KICAgICAgICAgICAgICAgICJ0ZXh0LWNsYXNzaWZpY2F0aW9uIiwNCiAgICAgICAgICAgICAgICBtb2RlbD0ibWljcm9zb2Z0L0RpYWxvR1BULXNtYWxsIiwNCiAgICAgICAgICAgICAgICByZXR1cm5fYWxsX3Njb3Jlcz1UcnVlDQogICAgICAgICAgICApDQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmIGNhbGxiYWNrOg0KICAgICAgICAgICAgICAgIGNhbGxiYWNrKCJMb2FkaW5nIHRleHQgZW1iZWRkZXIuLi4iKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAjIFNlbnRlbmNlIHRyYW5zZm9ybWVyIGZvciBzZW1hbnRpYyBzaW1pbGFyaXR5DQogICAgICAgICAgICBzZWxmLmVtYmVkZGVyID0gU2VudGVuY2VUcmFuc2Zvcm1lcignYWxsLU1pbmlMTS1MNi12MicpDQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmIGNhbGxiYWNrOg0KICAgICAgICAgICAgICAgIGNhbGxiYWNrKCJMb2FkaW5nIHRleHQgZ2VuZXJhdG9yLi4uIikNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBTbWFsbCBHUFQgbW9kZWwgZm9yIHRleHQgZ2VuZXJhdGlvbg0KICAgICAgICAgICAgc2VsZi50ZXh0X2dlbmVyYXRvciA9IHBpcGVsaW5lKA0KICAgICAgICAgICAgICAgICJ0ZXh0LWdlbmVyYXRpb24iLA0KICAgICAgICAgICAgICAgIG1vZGVsPSJncHQyIiwNCiAgICAgICAgICAgICAgICBtYXhfbGVuZ3RoPTEwMCwNCiAgICAgICAgICAgICAgICBudW1fcmV0dXJuX3NlcXVlbmNlcz0xLA0KICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlPTAuNw0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBzZWxmLmluaXRpYWxpemVkID0gVHJ1ZQ0KICAgICAgICAgICAgaWYgY2FsbGJhY2s6DQogICAgICAgICAgICAgICAgY2FsbGJhY2soIkFJIG1vZGVscyBsb2FkZWQgc3VjY2Vzc2Z1bGx5ISIpDQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICAgICAgDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIGVycm9yX21zZyA9IGYiRXJyb3IgbG9hZGluZyBBSSBtb2RlbHM6IHtzdHIoZSl9Ig0KICAgICAgICAgICAgaWYgY2FsbGJhY2s6DQogICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3JfbXNnKQ0KICAgICAgICAgICAgcHJpbnQoZXJyb3JfbXNnKQ0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgDQogICAgZGVmIGludGVycHJldF9jb21tYW5kKHNlbGYsIHVzZXJfaW5wdXQpOg0KICAgICAgICAiIiJJbnRlcnByZXQgbmF0dXJhbCBsYW5ndWFnZSBpbnB1dCBpbnRvIHN5c3RlbSBjb21tYW5kcyIiIg0KICAgICAgICBpZiBub3Qgc2VsZi5pbml0aWFsaXplZDoNCiAgICAgICAgICAgIHJldHVybiB1c2VyX2lucHV0DQogICAgICAgICAgICANCiAgICAgICAgIyBEZWZpbmUgY29tbWFuZCBwYXR0ZXJucw0KICAgICAgICBjb21tYW5kX3BhdHRlcm5zID0gew0KICAgICAgICAgICAgImZpbGVfb3BlcmF0aW9uIjogWw0KICAgICAgICAgICAgICAgICJsaXN0IGZpbGVzIiwgInNob3cgZmlsZXMiLCAiZGlyIiwgImxzIiwgIm9wZW4gZm9sZGVyIiwNCiAgICAgICAgICAgICAgICAiY3JlYXRlIGZpbGUiLCAiZGVsZXRlIGZpbGUiLCAiY29weSBmaWxlIiwgIm1vdmUgZmlsZSINCiAgICAgICAgICAgIF0sDQogICAgICAgICAgICAiYXBwbGljYXRpb24iOiBbDQogICAgICAgICAgICAgICAgIm9wZW4gY2FsY3VsYXRvciIsICJvcGVuIG5vdGVwYWQiLCAib3BlbiBicm93c2VyIiwNCiAgICAgICAgICAgICAgICAic3RhcnQgYXBwIiwgImxhdW5jaCBwcm9ncmFtIiwgInJ1biBhcHBsaWNhdGlvbiINCiAgICAgICAgICAgIF0sDQogICAgICAgICAgICAic3lzdGVtX2luZm8iOiBbDQogICAgICAgICAgICAgICAgInN5c3RlbSBpbmZvIiwgImNvbXB1dGVyIHNwZWNzIiwgImhhcmR3YXJlIGluZm8iLA0KICAgICAgICAgICAgICAgICJtZW1vcnkgdXNhZ2UiLCAiY3B1IHVzYWdlIiwgImRpc2sgc3BhY2UiDQogICAgICAgICAgICBdLA0KICAgICAgICAgICAgIm5ldHdvcmsiOiBbDQogICAgICAgICAgICAgICAgInBpbmciLCAiaW50ZXJuZXQiLCAibmV0d29yayIsICJpcCBhZGRyZXNzIiwgIndpZmkiDQogICAgICAgICAgICBdDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIHVzZXJfbG93ZXIgPSB1c2VyX2lucHV0Lmxvd2VyKCkNCiAgICAgICAgDQogICAgICAgICMgU2ltcGxlIHBhdHRlcm4gbWF0Y2hpbmcgZm9yIGNvbW1vbiBjb21tYW5kcw0KICAgICAgICBpZiBhbnkocGF0dGVybiBpbiB1c2VyX2xvd2VyIGZvciBwYXR0ZXJuIGluIGNvbW1hbmRfcGF0dGVybnNbImZpbGVfb3BlcmF0aW9uIl0pOg0KICAgICAgICAgICAgaWYgImxpc3QiIGluIHVzZXJfbG93ZXIgb3IgInNob3ciIGluIHVzZXJfbG93ZXI6DQogICAgICAgICAgICAgICAgcmV0dXJuICJkaXIiDQogICAgICAgICAgICBlbGlmICJvcGVuIGZvbGRlciIgaW4gdXNlcl9sb3dlcjoNCiAgICAgICAgICAgICAgICByZXR1cm4gImV4cGxvcmVyIC4iDQogICAgICAgICAgICAgICAgDQogICAgICAgIGVsaWYgYW55KHBhdHRlcm4gaW4gdXNlcl9sb3dlciBmb3IgcGF0dGVybiBpbiBjb21tYW5kX3BhdHRlcm5zWyJhcHBsaWNhdGlvbiJdKToNCiAgICAgICAgICAgIGlmICJjYWxjdWxhdG9yIiBpbiB1c2VyX2xvd2VyIG9yICJjYWxjIiBpbiB1c2VyX2xvd2VyOg0KICAgICAgICAgICAgICAgIHJldHVybiAiY2FsYyINCiAgICAgICAgICAgIGVsaWYgIm5vdGVwYWQiIGluIHVzZXJfbG93ZXI6DQogICAgICAgICAgICAgICAgcmV0dXJuICJub3RlcGFkIg0KICAgICAgICAgICAgZWxpZiAiYnJvd3NlciIgaW4gdXNlcl9sb3dlcjoNCiAgICAgICAgICAgICAgICByZXR1cm4gInN0YXJ0IGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20iDQogICAgICAgICAgICAgICAgDQogICAgICAgIGVsaWYgYW55KHBhdHRlcm4gaW4gdXNlcl9sb3dlciBmb3IgcGF0dGVybiBpbiBjb21tYW5kX3BhdHRlcm5zWyJzeXN0ZW1faW5mbyJdKToNCiAgICAgICAgICAgIGlmICJtZW1vcnkiIGluIHVzZXJfbG93ZXI6DQogICAgICAgICAgICAgICAgcmV0dXJuICJ0YXNrbGlzdCINCiAgICAgICAgICAgIGVsaWYgImRpc2siIGluIHVzZXJfbG93ZXI6DQogICAgICAgICAgICAgICAgcmV0dXJuICJkaXIiDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHJldHVybiAic3lzdGVtaW5mbyINCiAgICAgICAgICAgICAgICANCiAgICAgICAgZWxpZiBhbnkocGF0dGVybiBpbiB1c2VyX2xvd2VyIGZvciBwYXR0ZXJuIGluIGNvbW1hbmRfcGF0dGVybnNbIm5ldHdvcmsiXSk6DQogICAgICAgICAgICBpZiAicGluZyIgaW4gdXNlcl9sb3dlcjoNCiAgICAgICAgICAgICAgICByZXR1cm4gInBpbmcgZ29vZ2xlLmNvbSINCiAgICAgICAgICAgIGVsaWYgImlwIiBpbiB1c2VyX2xvd2VyOg0KICAgICAgICAgICAgICAgIHJldHVybiAiaXBjb25maWciDQogICAgICAgICAgICAgICAgDQogICAgICAgIHJldHVybiB1c2VyX2lucHV0DQogICAgDQogICAgZGVmIGdlbmVyYXRlX3Jlc3BvbnNlKHNlbGYsIGNvbnRleHQpOg0KICAgICAgICAiIiJHZW5lcmF0ZSBBSSByZXNwb25zZSBiYXNlZCBvbiBjb250ZXh0IiIiDQogICAgICAgIGlmIG5vdCBzZWxmLmluaXRpYWxpemVkIG9yIG5vdCBzZWxmLnRleHRfZ2VuZXJhdG9yOg0KICAgICAgICAgICAgcmV0dXJuICJBSSBtb2RlbHMgbm90IGxvYWRlZC4gVXNpbmcgYmFzaWMgbW9kZS4iDQogICAgICAgICAgICANCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcHJvbXB0ID0gZiJDb21wdXRlciBhZ2VudCByZXNwb25zZSBmb3I6IHtjb250ZXh0fSINCiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi50ZXh0X2dlbmVyYXRvcihwcm9tcHQsIG1heF9sZW5ndGg9NTAsIG51bV9yZXR1cm5fc2VxdWVuY2VzPTEpDQogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VbMF1bJ2dlbmVyYXRlZF90ZXh0J10ucmVwbGFjZShwcm9tcHQsICIiKS5zdHJpcCgpDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHJldHVybiBmIkFJIGdlbmVyYXRpb24gZXJyb3I6IHtzdHIoZSl9Ig0KDQpjbGFzcyBBSUNvbXB1dGVyVXNlQWdlbnQ6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIHJvb3QpOg0KICAgICAgICBzZWxmLnJvb3QgPSByb290DQogICAgICAgIHNlbGYucm9vdC50aXRsZSgiQUktRW5oYW5jZWQgQ29tcHV0ZXIgVXNlIEFnZW50IikNCiAgICAgICAgc2VsZi5yb290Lmdlb21ldHJ5KCI5MDB4NzAwIikNCiAgICAgICAgDQogICAgICAgICMgSW5pdGlhbGl6ZSBBSSBtYW5hZ2VyDQogICAgICAgIHNlbGYuYWlfbWFuYWdlciA9IExvY2FsQUlNYW5hZ2VyKCkNCiAgICAgICAgDQogICAgICAgICMgQ3JlYXRlIFVJDQogICAgICAgIHNlbGYuY3JlYXRlX3VpKCkNCiAgICAgICAgDQogICAgICAgICMgSW5pdGlhbGl6ZSBBSSBtb2RlbHMgaW4gYmFja2dyb3VuZA0KICAgICAgICBzZWxmLmluaXRpYWxpemVfYWlfYXN5bmMoKQ0KICAgICAgICANCiAgICBkZWYgY3JlYXRlX3VpKHNlbGYpOg0KICAgICAgICAiIiJDcmVhdGUgdGhlIHVzZXIgaW50ZXJmYWNlIiIiDQogICAgICAgICMgQ3JlYXRlIG1haW4gZnJhbWUNCiAgICAgICAgbWFpbl9mcmFtZSA9IHR0ay5GcmFtZShzZWxmLnJvb3QsIHBhZGRpbmc9IjEwIikNCiAgICAgICAgbWFpbl9mcmFtZS5ncmlkKHJvdz0wLCBjb2x1bW49MCwgc3RpY2t5PSh0ay5XLCB0ay5FLCB0ay5OLCB0ay5TKSkNCiAgICAgICAgDQogICAgICAgICMgQ29uZmlndXJlIGdyaWQgd2VpZ2h0cw0KICAgICAgICBzZWxmLnJvb3QuY29sdW1uY29uZmlndXJlKDAsIHdlaWdodD0xKQ0KICAgICAgICBzZWxmLnJvb3Qucm93Y29uZmlndXJlKDAsIHdlaWdodD0xKQ0KICAgICAgICBtYWluX2ZyYW1lLmNvbHVtbmNvbmZpZ3VyZSgxLCB3ZWlnaHQ9MSkNCiAgICAgICAgbWFpbl9mcmFtZS5yb3djb25maWd1cmUoMiwgd2VpZ2h0PTEpDQogICAgICAgIA0KICAgICAgICAjIFRpdGxlIHdpdGggQUkgaW5kaWNhdG9yDQogICAgICAgIHRpdGxlX2ZyYW1lID0gdHRrLkZyYW1lKG1haW5fZnJhbWUpDQogICAgICAgIHRpdGxlX2ZyYW1lLmdyaWQocm93PTAsIGNvbHVtbj0wLCBjb2x1bW5zcGFuPTIsIHN0aWNreT0odGsuVywgdGsuRSksIHBhZHk9KDAsIDEwKSkNCiAgICAgICAgDQogICAgICAgIHRpdGxlX2xhYmVsID0gdHRrLkxhYmVsKHRpdGxlX2ZyYW1lLCB0ZXh0PSJBSS1FbmhhbmNlZCBDb21wdXRlciBVc2UgQWdlbnQiLCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250PSgnQXJpYWwnLCAxNiwgJ2JvbGQnKSkNCiAgICAgICAgdGl0bGVfbGFiZWwucGFjayhzaWRlPXRrLkxFRlQpDQogICAgICAgIA0KICAgICAgICBzZWxmLmFpX3N0YXR1c19sYWJlbCA9IHR0ay5MYWJlbCh0aXRsZV9mcmFtZSwgdGV4dD0i8J+kliBBSTogTG9hZGluZy4uLiIsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ9KCdBcmlhbCcsIDEwKSwgZm9yZWdyb3VuZD0ib3JhbmdlIikNCiAgICAgICAgc2VsZi5haV9zdGF0dXNfbGFiZWwucGFjayhzaWRlPXRrLlJJR0hUKQ0KICAgICAgICANCiAgICAgICAgIyBJbnB1dCBzZWN0aW9uIHdpdGggQUkgdG9nZ2xlDQogICAgICAgIGlucHV0X2ZyYW1lID0gdHRrLkxhYmVsRnJhbWUobWFpbl9mcmFtZSwgdGV4dD0iQ29tbWFuZCBJbnB1dCIsIHBhZGRpbmc9IjUiKQ0KICAgICAgICBpbnB1dF9mcmFtZS5ncmlkKHJvdz0xLCBjb2x1bW49MCwgY29sdW1uc3Bhbj0yLCBzdGlja3k9KHRrLlcsIHRrLkUpLCBwYWR5PSgwLCAxMCkpDQogICAgICAgIGlucHV0X2ZyYW1lLmNvbHVtbmNvbmZpZ3VyZSgwLCB3ZWlnaHQ9MSkNCiAgICAgICAgDQogICAgICAgICMgQUkgbW9kZSB0b2dnbGUNCiAgICAgICAgYWlfZnJhbWUgPSB0dGsuRnJhbWUoaW5wdXRfZnJhbWUpDQogICAgICAgIGFpX2ZyYW1lLmdyaWQocm93PTAsIGNvbHVtbj0wLCBjb2x1bW5zcGFuPTMsIHN0aWNreT0odGsuVywgdGsuRSksIHBhZHk9KDAsIDUpKQ0KICAgICAgICANCiAgICAgICAgc2VsZi5haV9tb2RlID0gdGsuQm9vbGVhblZhcih2YWx1ZT1UcnVlKQ0KICAgICAgICBhaV9jaGVjayA9IHR0ay5DaGVja2J1dHRvbihhaV9mcmFtZSwgdGV4dD0iQUkgQ29tbWFuZCBJbnRlcnByZXRhdGlvbiIsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlPXNlbGYuYWlfbW9kZSkNCiAgICAgICAgYWlfY2hlY2sucGFjayhzaWRlPXRrLkxFRlQpDQogICAgICAgIA0KICAgICAgICB0dGsuQnV0dG9uKGFpX2ZyYW1lLCB0ZXh0PSJJbnN0YWxsIE1vZGVscyIsIGNvbW1hbmQ9c2VsZi5pbnN0YWxsX21vZGVscykucGFjayhzaWRlPXRrLlJJR0hUKQ0KICAgICAgICANCiAgICAgICAgIyBDb21tYW5kIGVudHJ5DQogICAgICAgIHNlbGYuY29tbWFuZF9lbnRyeSA9IHR0ay5FbnRyeShpbnB1dF9mcmFtZSwgZm9udD0oJ0FyaWFsJywgMTEpLCB3aWR0aD02MCkNCiAgICAgICAgc2VsZi5jb21tYW5kX2VudHJ5LmdyaWQocm93PTEsIGNvbHVtbj0wLCBzdGlja3k9KHRrLlcsIHRrLkUpLCBwYWR4PSgwLCA1KSkNCiAgICAgICAgc2VsZi5jb21tYW5kX2VudHJ5LmJpbmQoJzxSZXR1cm4+Jywgc2VsZi5leGVjdXRlX2NvbW1hbmQpDQogICAgICAgIA0KICAgICAgICBleGVjdXRlX2J0biA9IHR0ay5CdXR0b24oaW5wdXRfZnJhbWUsIHRleHQ9IkV4ZWN1dGUiLCBjb21tYW5kPXNlbGYuZXhlY3V0ZV9jb21tYW5kKQ0KICAgICAgICBleGVjdXRlX2J0bi5ncmlkKHJvdz0xLCBjb2x1bW49MSkNCiAgICAgICAgDQogICAgICAgICMgUXVpY2sgYWN0aW9ucyBmcmFtZSAoZW5oYW5jZWQpDQogICAgICAgIGFjdGlvbnNfZnJhbWUgPSB0dGsuTGFiZWxGcmFtZShtYWluX2ZyYW1lLCB0ZXh0PSJRdWljayBBY3Rpb25zIiwgcGFkZGluZz0iNSIpDQogICAgICAgIGFjdGlvbnNfZnJhbWUuZ3JpZChyb3c9MiwgY29sdW1uPTAsIGNvbHVtbnNwYW49Miwgc3RpY2t5PSh0ay5XLCB0ay5FKSwgcGFkeT0oMCwgMTApKQ0KICAgICAgICANCiAgICAgICAgIyBSb3cgMSBvZiBidXR0b25zDQogICAgICAgIGJ1dHRvbl9yb3cxID0gdHRrLkZyYW1lKGFjdGlvbnNfZnJhbWUpDQogICAgICAgIGJ1dHRvbl9yb3cxLnBhY2soZmlsbD10ay5YLCBwYWR5PTIpDQogICAgICAgIA0KICAgICAgICB0dGsuQnV0dG9uKGJ1dHRvbl9yb3cxLCB0ZXh0PSLwn5OxIENhbGN1bGF0b3IiLCBjb21tYW5kPXNlbGYub3Blbl9jYWxjdWxhdG9yKS5wYWNrKHNpZGU9dGsuTEVGVCwgcGFkeD0yKQ0KICAgICAgICB0dGsuQnV0dG9uKGJ1dHRvbl9yb3cxLCB0ZXh0PSLwn5OdIE5vdGVwYWQiLCBjb21tYW5kPXNlbGYub3Blbl9ub3RlcGFkKS5wYWNrKHNpZGU9dGsuTEVGVCwgcGFkeD0yKQ0KICAgICAgICB0dGsuQnV0dG9uKGJ1dHRvbl9yb3cxLCB0ZXh0PSLwn4yQIEJyb3dzZXIiLCBjb21tYW5kPXNlbGYub3Blbl9icm93c2VyKS5wYWNrKHNpZGU9dGsuTEVGVCwgcGFkeD0yKQ0KICAgICAgICB0dGsuQnV0dG9uKGJ1dHRvbl9yb3cxLCB0ZXh0PSLwn5OBIEZpbGVzIiwgY29tbWFuZD1zZWxmLmxpc3RfZmlsZXMpLnBhY2soc2lkZT10ay5MRUZULCBwYWR4PTIpDQogICAgICAgIHR0ay5CdXR0b24oYnV0dG9uX3JvdzEsIHRleHQ9IuKEue+4jyBTeXN0ZW0gSW5mbyIsIGNvbW1hbmQ9c2VsZi5zeXN0ZW1faW5mbykucGFjayhzaWRlPXRrLkxFRlQsIHBhZHg9MikNCiAgICAgICAgDQogICAgICAgICMgUm93IDIgb2YgYnV0dG9ucyAoQUktZW5oYW5jZWQpDQogICAgICAgIGJ1dHRvbl9yb3cyID0gdHRrLkZyYW1lKGFjdGlvbnNfZnJhbWUpDQogICAgICAgIGJ1dHRvbl9yb3cyLnBhY2soZmlsbD10ay5YLCBwYWR5PTIpDQogICAgICAgIA0KICAgICAgICB0dGsuQnV0dG9uKGJ1dHRvbl9yb3cyLCB0ZXh0PSLwn6SWIEFJIFN1Z2dlc3QiLCBjb21tYW5kPXNlbGYuYWlfc3VnZ2VzdCkucGFjayhzaWRlPXRrLkxFRlQsIHBhZHg9MikNCiAgICAgICAgdHRrLkJ1dHRvbihidXR0b25fcm93MiwgdGV4dD0i8J+TiiBQZXJmb3JtYW5jZSIsIGNvbW1hbmQ9c2VsZi5zaG93X3BlcmZvcm1hbmNlKS5wYWNrKHNpZGU9dGsuTEVGVCwgcGFkeD0yKQ0KICAgICAgICB0dGsuQnV0dG9uKGJ1dHRvbl9yb3cyLCB0ZXh0PSLwn5SNIFNtYXJ0IFNlYXJjaCIsIGNvbW1hbmQ9c2VsZi5zbWFydF9zZWFyY2gpLnBhY2soc2lkZT10ay5MRUZULCBwYWR4PTIpDQogICAgICAgIHR0ay5CdXR0b24oYnV0dG9uX3JvdzIsIHRleHQ9IvCfp7kgQ2xlYW4gVXAiLCBjb21tYW5kPXNlbGYuY2xlYW51cF9zdWdnZXN0aW9ucykucGFjayhzaWRlPXRrLkxFRlQsIHBhZHg9MikNCiAgICAgICAgDQogICAgICAgICMgT3V0cHV0IHNlY3Rpb24gd2l0aCB0YWJzDQogICAgICAgIG91dHB1dF9mcmFtZSA9IHR0ay5MYWJlbEZyYW1lKG1haW5fZnJhbWUsIHRleHQ9Ik91dHB1dCIsIHBhZGRpbmc9IjUiKQ0KICAgICAgICBvdXRwdXRfZnJhbWUuZ3JpZChyb3c9MywgY29sdW1uPTAsIGNvbHVtbnNwYW49Miwgc3RpY2t5PSh0ay5XLCB0ay5FLCB0ay5OLCB0ay5TKSkNCiAgICAgICAgb3V0cHV0X2ZyYW1lLmNvbHVtbmNvbmZpZ3VyZSgwLCB3ZWlnaHQ9MSkNCiAgICAgICAgb3V0cHV0X2ZyYW1lLnJvd2NvbmZpZ3VyZSgwLCB3ZWlnaHQ9MSkNCiAgICAgICAgDQogICAgICAgICMgQ3JlYXRlIG5vdGVib29rIGZvciB0YWJzDQogICAgICAgIHNlbGYubm90ZWJvb2sgPSB0dGsuTm90ZWJvb2sob3V0cHV0X2ZyYW1lKQ0KICAgICAgICBzZWxmLm5vdGVib29rLmdyaWQocm93PTAsIGNvbHVtbj0wLCBzdGlja3k9KHRrLlcsIHRrLkUsIHRrLk4sIHRrLlMpKQ0KICAgICAgICANCiAgICAgICAgIyBDb21tYW5kIG91dHB1dCB0YWINCiAgICAgICAgY29tbWFuZF9mcmFtZSA9IHR0ay5GcmFtZShzZWxmLm5vdGVib29rKQ0KICAgICAgICBzZWxmLm5vdGVib29rLmFkZChjb21tYW5kX2ZyYW1lLCB0ZXh0PSJDb21tYW5kIE91dHB1dCIpDQogICAgICAgIA0KICAgICAgICBzZWxmLm91dHB1dF90ZXh0ID0gc2Nyb2xsZWR0ZXh0LlNjcm9sbGVkVGV4dChjb21tYW5kX2ZyYW1lLCBoZWlnaHQ9MTUsIGZvbnQ9KCdDb25zb2xhcycsIDEwKSkNCiAgICAgICAgc2VsZi5vdXRwdXRfdGV4dC5wYWNrKGZpbGw9dGsuQk9USCwgZXhwYW5kPVRydWUpDQogICAgICAgIA0KICAgICAgICAjIEFJIGNoYXQgdGFiDQogICAgICAgIGFpX2ZyYW1lID0gdHRrLkZyYW1lKHNlbGYubm90ZWJvb2spDQogICAgICAgIHNlbGYubm90ZWJvb2suYWRkKGFpX2ZyYW1lLCB0ZXh0PSJBSSBBc3Npc3RhbnQiKQ0KICAgICAgICANCiAgICAgICAgc2VsZi5haV90ZXh0ID0gc2Nyb2xsZWR0ZXh0LlNjcm9sbGVkVGV4dChhaV9mcmFtZSwgaGVpZ2h0PTE1LCBmb250PSgnQ29uc29sYXMnLCAxMCkpDQogICAgICAgIHNlbGYuYWlfdGV4dC5wYWNrKGZpbGw9dGsuQk9USCwgZXhwYW5kPVRydWUpDQogICAgICAgIA0KICAgICAgICAjIFN0YXR1cyBiYXINCiAgICAgICAgc2VsZi5zdGF0dXNfdmFyID0gdGsuU3RyaW5nVmFyKCkNCiAgICAgICAgc2VsZi5zdGF0dXNfdmFyLnNldCgiUmVhZHkgLSBBSSBtb2RlbHMgbG9hZGluZy4uLiIpDQogICAgICAgIHN0YXR1c19iYXIgPSB0dGsuTGFiZWwobWFpbl9mcmFtZSwgdGV4dHZhcmlhYmxlPXNlbGYuc3RhdHVzX3ZhciwgcmVsaWVmPXRrLlNVTktFTikNCiAgICAgICAgc3RhdHVzX2Jhci5ncmlkKHJvdz00LCBjb2x1bW49MCwgY29sdW1uc3Bhbj0yLCBzdGlja3k9KHRrLlcsIHRrLkUpLCBwYWR5PSgxMCwgMCkpDQogICAgICAgIA0KICAgICAgICAjIEluaXRpYWxpemUgbG9ncw0KICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKCJBSS1FbmhhbmNlZCBDb21wdXRlciBVc2UgQWdlbnQgaW5pdGlhbGl6ZWQiKQ0KICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKCJMb2FkaW5nIEFJIG1vZGVscyBpbiBiYWNrZ3JvdW5kLi4uIikNCiAgICAgICAgc2VsZi5sb2dfbWVzc2FnZSgiLSIgKiA2MCkNCiAgICAgICAgDQogICAgICAgIHNlbGYuYWlfbG9nKCJBSSBBc3Npc3RhbnQgcmVhZHkhIEFzayBtZSBhbnl0aGluZyBhYm91dCB5b3VyIGNvbXB1dGVyLiIpDQogICAgICAgIHNlbGYuYWlfbG9nKCJUcnkgY29tbWFuZHMgbGlrZTogJ3Nob3cgbWUgc3lzdGVtIGluZm8nIG9yICdmaW5kIGxhcmdlIGZpbGVzJyIpDQogICAgICAgIA0KICAgIGRlZiBpbml0aWFsaXplX2FpX2FzeW5jKHNlbGYpOg0KICAgICAgICAiIiJJbml0aWFsaXplIEFJIG1vZGVscyBpbiBhIHNlcGFyYXRlIHRocmVhZCIiIg0KICAgICAgICBkZWYgaW5pdF90aHJlYWQoKToNCiAgICAgICAgICAgIHN1Y2Nlc3MgPSBzZWxmLmFpX21hbmFnZXIuaW5pdGlhbGl6ZV9tb2RlbHMoc2VsZi51cGRhdGVfYWlfc3RhdHVzKQ0KICAgICAgICAgICAgaWYgc3VjY2VzczoNCiAgICAgICAgICAgICAgICBzZWxmLmFpX3N0YXR1c19sYWJlbC5jb25maWcodGV4dD0i8J+kliBBSTogUmVhZHkiLCBmb3JlZ3JvdW5kPSJncmVlbiIpDQogICAgICAgICAgICAgICAgc2VsZi5zdGF0dXNfdmFyLnNldCgiUmVhZHkgLSBBSSBtb2RlbHMgbG9hZGVkIikNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgc2VsZi5haV9zdGF0dXNfbGFiZWwuY29uZmlnKHRleHQ9IvCfpJYgQUk6IEZhaWxlZCIsIGZvcmVncm91bmQ9InJlZCIpDQogICAgICAgICAgICAgICAgc2VsZi5zdGF0dXNfdmFyLnNldCgiUmVhZHkgLSBBSSBtb2RlbHMgZmFpbGVkIHRvIGxvYWQiKQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICB0aHJlYWQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1pbml0X3RocmVhZCwgZGFlbW9uPVRydWUpDQogICAgICAgIHRocmVhZC5zdGFydCgpDQogICAgICAgIA0KICAgIGRlZiB1cGRhdGVfYWlfc3RhdHVzKHNlbGYsIG1lc3NhZ2UpOg0KICAgICAgICAiIiJVcGRhdGUgQUkgbG9hZGluZyBzdGF0dXMiIiINCiAgICAgICAgc2VsZi5yb290LmFmdGVyKDAsIGxhbWJkYTogc2VsZi5haV9sb2coZiJbQUldIHttZXNzYWdlfSIpKQ0KICAgICAgICANCiAgICBkZWYgbG9nX21lc3NhZ2Uoc2VsZiwgbWVzc2FnZSk6DQogICAgICAgICIiIkFkZCBhIG1lc3NhZ2UgdG8gdGhlIGNvbW1hbmQgb3V0cHV0IGxvZyIiIg0KICAgICAgICB0aW1lc3RhbXAgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQ0KICAgICAgICBzZWxmLm91dHB1dF90ZXh0Lmluc2VydCh0ay5FTkQsIGYiW3t0aW1lc3RhbXB9XSB7bWVzc2FnZX1cbiIpDQogICAgICAgIHNlbGYub3V0cHV0X3RleHQuc2VlKHRrLkVORCkNCiAgICAgICAgc2VsZi5yb290LnVwZGF0ZV9pZGxldGFza3MoKQ0KICAgICAgICANCiAgICBkZWYgYWlfbG9nKHNlbGYsIG1lc3NhZ2UpOg0KICAgICAgICAiIiJBZGQgYSBtZXNzYWdlIHRvIHRoZSBBSSBhc3Npc3RhbnQgbG9nIiIiDQogICAgICAgIHRpbWVzdGFtcCA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpDQogICAgICAgIHNlbGYuYWlfdGV4dC5pbnNlcnQodGsuRU5ELCBmIlt7dGltZXN0YW1wfV0ge21lc3NhZ2V9XG4iKQ0KICAgICAgICBzZWxmLmFpX3RleHQuc2VlKHRrLkVORCkNCiAgICAgICAgc2VsZi5yb290LnVwZGF0ZV9pZGxldGFza3MoKQ0KICAgICAgICANCiAgICBkZWYgZXhlY3V0ZV9jb21tYW5kKHNlbGYsIGV2ZW50PU5vbmUpOg0KICAgICAgICAiIiJFeGVjdXRlIHRoZSBjb21tYW5kIGVudGVyZWQgYnkgdGhlIHVzZXIiIiINCiAgICAgICAgdXNlcl9pbnB1dCA9IHNlbGYuY29tbWFuZF9lbnRyeS5nZXQoKS5zdHJpcCgpDQogICAgICAgIGlmIG5vdCB1c2VyX2lucHV0Og0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICANCiAgICAgICAgc2VsZi5jb21tYW5kX2VudHJ5LmRlbGV0ZSgwLCB0ay5FTkQpDQogICAgICAgIHNlbGYuc3RhdHVzX3Zhci5zZXQoIkV4ZWN1dGluZy4uLiIpDQogICAgICAgIA0KICAgICAgICAjIFVzZSBBSSBpbnRlcnByZXRhdGlvbiBpZiBlbmFibGVkDQogICAgICAgIGlmIHNlbGYuYWlfbW9kZS5nZXQoKSBhbmQgc2VsZi5haV9tYW5hZ2VyLmluaXRpYWxpemVkOg0KICAgICAgICAgICAgaW50ZXJwcmV0ZWRfY29tbWFuZCA9IHNlbGYuYWlfbWFuYWdlci5pbnRlcnByZXRfY29tbWFuZCh1c2VyX2lucHV0KQ0KICAgICAgICAgICAgaWYgaW50ZXJwcmV0ZWRfY29tbWFuZCAhPSB1c2VyX2lucHV0Og0KICAgICAgICAgICAgICAgIHNlbGYuYWlfbG9nKGYiSW50ZXJwcmV0ZWQgJ3t1c2VyX2lucHV0fScgYXM6IHtpbnRlcnByZXRlZF9jb21tYW5kfSIpDQogICAgICAgICAgICBjb21tYW5kID0gaW50ZXJwcmV0ZWRfY29tbWFuZA0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgY29tbWFuZCA9IHVzZXJfaW5wdXQNCiAgICAgICAgICAgIA0KICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKGYiVXNlcjoge3VzZXJfaW5wdXR9IikNCiAgICAgICAgaWYgY29tbWFuZCAhPSB1c2VyX2lucHV0Og0KICAgICAgICAgICAgc2VsZi5sb2dfbWVzc2FnZShmIkV4ZWN1dGluZzoge2NvbW1hbmR9IikNCiAgICAgICAgDQogICAgICAgIHRyeToNCiAgICAgICAgICAgICMgSGFuZGxlIHNwZWNpYWwgY29tbWFuZHMNCiAgICAgICAgICAgIGlmIGNvbW1hbmQubG93ZXIoKS5zdGFydHN3aXRoKCdvcGVuICcpOg0KICAgICAgICAgICAgICAgIHNlbGYuaGFuZGxlX29wZW5fY29tbWFuZChjb21tYW5kWzU6XSkNCiAgICAgICAgICAgIGVsaWYgY29tbWFuZC5sb3dlcigpID09ICdjbGVhcic6DQogICAgICAgICAgICAgICAgc2VsZi5vdXRwdXRfdGV4dC5kZWxldGUoMS4wLCB0ay5FTkQpDQogICAgICAgICAgICAgICAgc2VsZi5sb2dfbWVzc2FnZSgiT3V0cHV0IGNsZWFyZWQiKQ0KICAgICAgICAgICAgZWxpZiBjb21tYW5kLmxvd2VyKCkgaW4gWydleGl0JywgJ3F1aXQnXToNCiAgICAgICAgICAgICAgICBzZWxmLnJvb3QucXVpdCgpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICMgRXhlY3V0ZSBhcyBzaGVsbCBjb21tYW5kDQogICAgICAgICAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oY29tbWFuZCwgc2hlbGw9VHJ1ZSwgY2FwdHVyZV9vdXRwdXQ9VHJ1ZSwgdGV4dD1UcnVlKQ0KICAgICAgICAgICAgICAgIGlmIHJlc3VsdC5zdGRvdXQ6DQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nX21lc3NhZ2UoZiJPdXRwdXQ6XG57cmVzdWx0LnN0ZG91dH0iKQ0KICAgICAgICAgICAgICAgIGlmIHJlc3VsdC5zdGRlcnI6DQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nX21lc3NhZ2UoZiJFcnJvcjpcbntyZXN1bHQuc3RkZXJyfSIpDQogICAgICAgICAgICAgICAgaWYgcmVzdWx0LnJldHVybmNvZGUgIT0gMDoNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dfbWVzc2FnZShmIkNvbW1hbmQgZmFpbGVkIHdpdGggZXhpdCBjb2RlOiB7cmVzdWx0LnJldHVybmNvZGV9IikNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHNlbGYubG9nX21lc3NhZ2UoZiJFcnJvciBleGVjdXRpbmcgY29tbWFuZDoge3N0cihlKX0iKQ0KICAgICAgICAgICAgDQogICAgICAgIHNlbGYuc3RhdHVzX3Zhci5zZXQoIlJlYWR5IikNCiAgICAgICAgDQogICAgZGVmIGhhbmRsZV9vcGVuX2NvbW1hbmQoc2VsZiwgdGFyZ2V0KToNCiAgICAgICAgIiIiSGFuZGxlICdvcGVuJyBjb21tYW5kcyIiIg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpZiB0YXJnZXQubG93ZXIoKSBpbiBbJ2NhbGN1bGF0b3InLCAnY2FsYyddOg0KICAgICAgICAgICAgICAgIHNlbGYub3Blbl9jYWxjdWxhdG9yKCkNCiAgICAgICAgICAgIGVsaWYgdGFyZ2V0Lmxvd2VyKCkgaW4gWydub3RlcGFkJywgJ3RleHQnXToNCiAgICAgICAgICAgICAgICBzZWxmLm9wZW5fbm90ZXBhZCgpDQogICAgICAgICAgICBlbGlmIHRhcmdldC5sb3dlcigpIGluIFsnYnJvd3NlcicsICd3ZWInXToNCiAgICAgICAgICAgICAgICBzZWxmLm9wZW5fYnJvd3NlcigpDQogICAgICAgICAgICBlbGlmIG9zLnBhdGguZXhpc3RzKHRhcmdldCk6DQogICAgICAgICAgICAgICAgb3Muc3RhcnRmaWxlKHRhcmdldCkNCiAgICAgICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKGYiT3BlbmVkOiB7dGFyZ2V0fSIpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICMgVHJ5IHRvIG9wZW4gYXMgVVJMDQogICAgICAgICAgICAgICAgd2ViYnJvd3Nlci5vcGVuKHRhcmdldCkNCiAgICAgICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKGYiT3BlbmVkIFVSTDoge3RhcmdldH0iKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKGYiRXJyb3Igb3BlbmluZyB7dGFyZ2V0fToge3N0cihlKX0iKQ0KICAgICAgICAgICAgDQogICAgZGVmIG9wZW5fY2FsY3VsYXRvcihzZWxmKToNCiAgICAgICAgIiIiT3BlbiBXaW5kb3dzIENhbGN1bGF0b3IiIiINCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc3VicHJvY2Vzcy5Qb3BlbihbJ2NhbGMuZXhlJ10pDQogICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKCJPcGVuZWQgQ2FsY3VsYXRvciIpDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHNlbGYubG9nX21lc3NhZ2UoZiJFcnJvciBvcGVuaW5nIENhbGN1bGF0b3I6IHtzdHIoZSl9IikNCiAgICAgICAgICAgIA0KICAgIGRlZiBvcGVuX25vdGVwYWQoc2VsZik6DQogICAgICAgICIiIk9wZW4gTm90ZXBhZCIiIg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzdWJwcm9jZXNzLlBvcGVuKFsnbm90ZXBhZC5leGUnXSkNCiAgICAgICAgICAgIHNlbGYubG9nX21lc3NhZ2UoIk9wZW5lZCBOb3RlcGFkIikNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgc2VsZi5sb2dfbWVzc2FnZShmIkVycm9yIG9wZW5pbmcgTm90ZXBhZDoge3N0cihlKX0iKQ0KICAgICAgICAgICAgDQogICAgZGVmIG9wZW5fYnJvd3NlcihzZWxmKToNCiAgICAgICAgIiIiT3BlbiBkZWZhdWx0IHdlYiBicm93c2VyIiIiDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHdlYmJyb3dzZXIub3BlbignaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbScpDQogICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKCJPcGVuZWQgd2ViIGJyb3dzZXIiKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKGYiRXJyb3Igb3BlbmluZyBicm93c2VyOiB7c3RyKGUpfSIpDQogICAgICAgICAgICANCiAgICBkZWYgbGlzdF9maWxlcyhzZWxmKToNCiAgICAgICAgIiIiTGlzdCBmaWxlcyBpbiBjdXJyZW50IGRpcmVjdG9yeSIiIg0KICAgICAgICB0cnk6DQogICAgICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bihbJ2RpciddLCBzaGVsbD1UcnVlLCBjYXB0dXJlX291dHB1dD1UcnVlLCB0ZXh0PVRydWUpDQogICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKCJDdXJyZW50IGRpcmVjdG9yeSBjb250ZW50czoiKQ0KICAgICAgICAgICAgc2VsZi5sb2dfbWVzc2FnZShyZXN1bHQuc3Rkb3V0KQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKGYiRXJyb3IgbGlzdGluZyBmaWxlczoge3N0cihlKX0iKQ0KICAgICAgICAgICAgDQogICAgZGVmIHN5c3RlbV9pbmZvKHNlbGYpOg0KICAgICAgICAiIiJEaXNwbGF5IHN5c3RlbSBpbmZvcm1hdGlvbiIiIg0KICAgICAgICB0cnk6DQogICAgICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bihbJ3N5c3RlbWluZm8nXSwgc2hlbGw9VHJ1ZSwgY2FwdHVyZV9vdXRwdXQ9VHJ1ZSwgdGV4dD1UcnVlKQ0KICAgICAgICAgICAgbGluZXMgPSByZXN1bHQuc3Rkb3V0LnNwbGl0KCdcbicpWzoxNV0gICMgRmlyc3QgMTUgbGluZXMNCiAgICAgICAgICAgIHNlbGYubG9nX21lc3NhZ2UoIlN5c3RlbSBJbmZvcm1hdGlvbjoiKQ0KICAgICAgICAgICAgc2VsZi5sb2dfbWVzc2FnZSgnXG4nLmpvaW4obGluZXMpKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKGYiRXJyb3IgZ2V0dGluZyBzeXN0ZW0gaW5mbzoge3N0cihlKX0iKQ0KICAgIA0KICAgICMgTmV3IEFJLWVuaGFuY2VkIGZ1bmN0aW9ucw0KICAgIGRlZiBhaV9zdWdnZXN0KHNlbGYpOg0KICAgICAgICAiIiJBSSBzdWdnZXN0cyB1c2VmdWwgY29tbWFuZHMgYmFzZWQgb24gc3lzdGVtIHN0YXRlIiIiDQogICAgICAgIHN1Z2dlc3Rpb25zID0gWw0KICAgICAgICAgICAgInN5c3RlbWluZm8gLSBWaWV3IGRldGFpbGVkIHN5c3RlbSBpbmZvcm1hdGlvbiIsDQogICAgICAgICAgICAidGFza2xpc3QgLSBTZWUgcnVubmluZyBwcm9jZXNzZXMiLA0KICAgICAgICAgICAgImRpciAvcyAqLmxvZyAtIEZpbmQgbG9nIGZpbGVzIiwNCiAgICAgICAgICAgICJwaW5nIGdvb2dsZS5jb20gLSBUZXN0IGludGVybmV0IGNvbm5lY3Rpb24iLA0KICAgICAgICAgICAgImlwY29uZmlnIC0gVmlldyBuZXR3b3JrIGNvbmZpZ3VyYXRpb24iDQogICAgICAgIF0NCiAgICAgICAgDQogICAgICAgIHNlbGYuYWlfbG9nKCJIZXJlIGFyZSBzb21lIHVzZWZ1bCBjb21tYW5kcyB5b3UgY2FuIHRyeToiKQ0KICAgICAgICBmb3Igc3VnZ2VzdGlvbiBpbiBzdWdnZXN0aW9uczoNCiAgICAgICAgICAgIHNlbGYuYWlfbG9nKGYi4oCiIHtzdWdnZXN0aW9ufSIpDQogICAgICAgICAgICANCiAgICBkZWYgc2hvd19wZXJmb3JtYW5jZShzZWxmKToNCiAgICAgICAgIiIiU2hvdyBzeXN0ZW0gcGVyZm9ybWFuY2UgaW5mb3JtYXRpb24iIiINCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgIyBNZW1vcnkgaW5mbw0KICAgICAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oWyd3bWljJywgJ09TJywgJ2dldCcsICdUb3RhbFZpcnR1YWxNZW1vcnlTaXplLFRvdGFsVmlzaWJsZU1lbW9yeVNpemUsRnJlZVBoeXNpY2FsTWVtb3J5JywgJy9mb3JtYXQ6bGlzdCddLCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGVsbD1UcnVlLCBjYXB0dXJlX291dHB1dD1UcnVlLCB0ZXh0PVRydWUpDQogICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKCJNZW1vcnkgSW5mb3JtYXRpb246IikNCiAgICAgICAgICAgIHNlbGYubG9nX21lc3NhZ2UocmVzdWx0LnN0ZG91dCkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBDUFUgaW5mbw0KICAgICAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oWyd3bWljJywgJ2NwdScsICdnZXQnLCAnbG9hZHBlcmNlbnRhZ2UnLCAnL3ZhbHVlJ10sIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoZWxsPVRydWUsIGNhcHR1cmVfb3V0cHV0PVRydWUsIHRleHQ9VHJ1ZSkNCiAgICAgICAgICAgIHNlbGYubG9nX21lc3NhZ2UoIkNQVSBVc2FnZToiKQ0KICAgICAgICAgICAgc2VsZi5sb2dfbWVzc2FnZShyZXN1bHQuc3Rkb3V0KQ0KICAgICAgICAgICAgDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHNlbGYubG9nX21lc3NhZ2UoZiJFcnJvciBnZXR0aW5nIHBlcmZvcm1hbmNlIGluZm86IHtzdHIoZSl9IikNCiAgICAgICAgICAgIA0KICAgIGRlZiBzbWFydF9zZWFyY2goc2VsZik6DQogICAgICAgICIiIlNtYXJ0IGZpbGUgc2VhcmNoIHdpdGggQUkgc3VnZ2VzdGlvbnMiIiINCiAgICAgICAgc2VhcmNoX3Rlcm0gPSB0ay5zaW1wbGVkaWFsb2cuYXNrc3RyaW5nKCJTbWFydCBTZWFyY2giLCAiV2hhdCBmaWxlcyBhcmUgeW91IGxvb2tpbmcgZm9yPyIpDQogICAgICAgIGlmIHNlYXJjaF90ZXJtOg0KICAgICAgICAgICAgc2VsZi5haV9sb2coZiJTZWFyY2hpbmcgZm9yOiB7c2VhcmNoX3Rlcm19IikNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bihbJ2RpcicsIGYnKntzZWFyY2hfdGVybX0qJywgJy9zJ10sIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGVsbD1UcnVlLCBjYXB0dXJlX291dHB1dD1UcnVlLCB0ZXh0PVRydWUpDQogICAgICAgICAgICAgICAgc2VsZi5sb2dfbWVzc2FnZShmIlNlYXJjaCByZXN1bHRzIGZvciAne3NlYXJjaF90ZXJtfSc6IikNCiAgICAgICAgICAgICAgICBzZWxmLmxvZ19tZXNzYWdlKHJlc3VsdC5zdGRvdXQpDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgc2VsZi5sb2dfbWVzc2FnZShmIkVycm9yIHNlYXJjaGluZzoge3N0cihlKX0iKQ0KICAgICAgICAgICAgICAgIA0KICAgIGRlZiBjbGVhbnVwX3N1Z2dlc3Rpb25zKHNlbGYpOg0KICAgICAgICAiIiJBSS1wb3dlcmVkIGNsZWFudXAgc3VnZ2VzdGlvbnMiIiINCiAgICAgICAgc2VsZi5haV9sb2coIkFuYWx5emluZyBzeXN0ZW0gZm9yIGNsZWFudXAgb3Bwb3J0dW5pdGllcy4uLiIpDQogICAgICAgIA0KICAgICAgICBzdWdnZXN0aW9ucyA9IFsNCiAgICAgICAgICAgICJ0ZW1wIGZpbGVzIGluICV0ZW1wJSBkaXJlY3RvcnkiLA0KICAgICAgICAgICAgImJyb3dzZXIgY2FjaGUgYW5kIGNvb2tpZXMiLA0KICAgICAgICAgICAgIm9sZCBsb2cgZmlsZXMiLA0KICAgICAgICAgICAgInVudXNlZCBwcm9ncmFtcyIsDQogICAgICAgICAgICAibGFyZ2UgZmlsZXMgdGFraW5nIHVwIHNwYWNlIg0KICAgICAgICBdDQogICAgICAgIA0KICAgICAgICBzZWxmLmFpX2xvZygiQ29uc2lkZXIgY2xlYW5pbmcgdXA6IikNCiAgICAgICAgZm9yIHN1Z2dlc3Rpb24gaW4gc3VnZ2VzdGlvbnM6DQogICAgICAgICAgICBzZWxmLmFpX2xvZyhmIuKAoiB7c3VnZ2VzdGlvbn0iKQ0KICAgICAgICAgICAgDQogICAgZGVmIGluc3RhbGxfbW9kZWxzKHNlbGYpOg0KICAgICAgICAiIiJJbnN0YWxsIEFJIG1vZGVscyBhbmQgZGVwZW5kZW5jaWVzIiIiDQogICAgICAgIGRlZiBpbnN0YWxsX3RocmVhZCgpOg0KICAgICAgICAgICAgc2VsZi5haV9sb2coIlN0YXJ0aW5nIG1vZGVsIGluc3RhbGxhdGlvbi4uLiIpDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgIyBJbnN0YWxsIHJlcXVpcmVtZW50cw0KICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MucnVuKFtzeXMuZXhlY3V0YWJsZSwgJy1tJywgJ3BpcCcsICdpbnN0YWxsJywgJy1yJywgJ3JlcXVpcmVtZW50cy50eHQnXSwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHR1cmVfb3V0cHV0PVRydWUsIHRleHQ9VHJ1ZSkNCiAgICAgICAgICAgICAgICBpZiByZXN1bHQucmV0dXJuY29kZSA9PSAwOg0KICAgICAgICAgICAgICAgICAgICBzZWxmLmFpX2xvZygi4pyFIFJlcXVpcmVtZW50cyBpbnN0YWxsZWQgc3VjY2Vzc2Z1bGx5ISIpDQogICAgICAgICAgICAgICAgICAgIHNlbGYuYWlfbG9nKCJSZWluaXRpYWxpemluZyBBSSBtb2RlbHMuLi4iKQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgIyBSZWluaXRpYWxpemUgQUkNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5haV9tYW5hZ2VyID0gTG9jYWxBSU1hbmFnZXIoKQ0KICAgICAgICAgICAgICAgICAgICBzdWNjZXNzID0gc2VsZi5haV9tYW5hZ2VyLmluaXRpYWxpemVfbW9kZWxzKHNlbGYudXBkYXRlX2FpX3N0YXR1cykNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmIHN1Y2Nlc3M6DQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJvb3QuYWZ0ZXIoMCwgbGFtYmRhOiBzZWxmLmFpX3N0YXR1c19sYWJlbC5jb25maWcodGV4dD0i8J+kliBBSTogUmVhZHkiLCBmb3JlZ3JvdW5kPSJncmVlbiIpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5haV9sb2coIvCfjokgQUkgbW9kZWxzIHJlYWR5ISBZb3UgY2FuIG5vdyB1c2UgQUkgZmVhdHVyZXMuIikNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWlfbG9nKCLinYwgRmFpbGVkIHRvIGluaXRpYWxpemUgQUkgbW9kZWxzLiIpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5haV9sb2coZiLinYwgSW5zdGFsbGF0aW9uIGZhaWxlZDoge3Jlc3VsdC5zdGRlcnJ9IikNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgc2VsZi5haV9sb2coZiLinYwgSW5zdGFsbGF0aW9uIGVycm9yOiB7c3RyKGUpfSIpDQogICAgICAgICAgICAgICAgDQogICAgICAgIHRocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PWluc3RhbGxfdGhyZWFkLCBkYWVtb249VHJ1ZSkNCiAgICAgICAgdGhyZWFkLnN0YXJ0KCkNCg0KZGVmIG1haW4oKToNCiAgICAjIEltcG9ydCB0a2ludGVyIHNpbXBsZWRpYWxvZyBmb3Igc21hcnQgc2VhcmNoDQogICAgdHJ5Og0KICAgICAgICBpbXBvcnQgdGtpbnRlci5zaW1wbGVkaWFsb2cNCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgICAgIHBhc3MNCiAgICAgICAgDQogICAgcm9vdCA9IHRrLlRrKCkNCiAgICBhcHAgPSBBSUNvbXB1dGVyVXNlQWdlbnQocm9vdCkNCiAgICByb290Lm1haW5sb29wKCkNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBtYWluKCkNCg0K",
    "computer_agent.py": "",
    "setup_models.py": "",

}

def extract_files(target_dir):
    """Extract embedded files"""
    import base64
    target_dir = Path(target_dir)
    target_dir.mkdir(exist_ok=True)
    
    for filename, content in APP_FILES.items():
        file_path = target_dir / filename
        with open(file_path, 'wb') as f:
            f.write(base64.b64decode(content.encode('utf-8')))
    
    print(f"✅ Extracted files to {target_dir}")

# Include the AutoInstaller class here...
